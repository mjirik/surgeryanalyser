"""
Django settings for piglegsurgeryweb project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

from rich.traceback import install
import sentry_sdk
from loguru import logger

install(show_locals=True)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

PRIVATE_DIR = BASE_DIR / "private"
PRIVATE_DIR.mkdir(exist_ok=True, parents=True)


# EmailProject/settings.py
# This should be at the start of the file
import environ

env = environ.Env()
env.read_env()
# environ.Env.read_env()

# Previous settings ...
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-!vhn+#d1^-232=9r.k!g)(n#d1^-232=9rk!g)(nv+p1484!jpvxg^'

# SECURITY WARNING: keep the secret key used in production secret!
from pathlib import Path

# scpath = Path(__file__).parent / "secretkey.txt"
scpath = PRIVATE_DIR / "secretkey.txt"
if scpath.exists():
    with open(scpath, "r") as f:
        SECRET_KEY = f.read().strip()
else:
    with open(scpath, "w") as f:
        from django.core.management.utils import get_random_secret_key

        SECRET_KEY = f.write(get_random_secret_key())
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["127.0.0.1", ".localhost"]
suran_allowed_hosts = env("SURAN_ALLOWED_HOSTS", default=[])
print(f"SURAN_ALLOWED_HOSTS={suran_allowed_hosts}")

ALLOWED_HOSTS.extend(suran_allowed_hosts.split(","))
print("ALLOWED_HOSTS=", ALLOWED_HOSTS)


# Application definition

INSTALLED_APPS = [
    "uploader.apps.UploaderConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_q",
    "django.db.migrations",
    "widget_tweaks",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


ROOT_URLCONF = "piglegsurgeryweb.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "piglegsurgeryweb.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": PRIVATE_DIR / "db.sqlite3",
        "OPTIONS": {
            "timeout": 20,  # in seconds
            # see also
            # https://docs.python.org/3.7/library/sqlite3.html#sqlite3.connect
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
STATIC_URL = "/static/"
# use python manage.py collectstatic
STATIC_ROOT = BASE_DIR / "static"
# STATIC_ROOT = "static"
# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, "static"),
# )
# UPLOAD_PATH = os.path.join(MEDIA_ROOT, 'upload')
UPLOAD_RELATIVE_PATH = "upload"
XLSX_SPREADSHEET_HASH = os.getenv("PIGLEG_XLSX_SPREADSHEET_HASH", "mnewis8asdfw2w4asdfwnxlk")
XLSX_SPREADSHEET_PATH = MEDIA_ROOT / XLSX_SPREADSHEET_HASH / "stats.xlsx"
XLSX_SPREADSHEET_URL = f"/media/{XLSX_SPREADSHEET_HASH}/stats.xlsx"
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

PIGLEGCV_TIMEOUT = 10 * 3600

Q_CLUSTER = {
    "workers": 5,
    "redis": {
        "host": "localhost",
        # "host": "redis",
        "port": 6379,
        "db": 0,
        "password": None,
        "socket_timeout": None,
        "charset": "utf-8",
        "errors": "strict",
        "unix_socket_path": None,
    },
    "timeout": PIGLEGCV_TIMEOUT,
    "retry": PIGLEGCV_TIMEOUT + 1000,
}

TIME_ZONE = "Europe/Prague"

CREDS_JSON_FILE = Path(PRIVATE_DIR) / "piglegsurgery-creds.json"

DROP_DIR = Path(MEDIA_ROOT) / "drop_dir"
LOG_DIR = Path("/home/appuser/pigleg/logs")

SENTRY_DSN = os.getenv("SENTRY_DSN", default=None)

if SENTRY_DSN:

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        # Add data like request headers and IP for users,
        # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
        send_default_pii=True,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for tracing.
        traces_sample_rate=1.0,
        _experiments={
            # Set continuous_profiling_auto_start to True
            # to automatically start the profiler on when
            # possible.
            "continuous_profiling_auto_start": True,
        },
    )
